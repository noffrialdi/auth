// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks_domain

import (
	context "context"

	model "github.com/noffrialdi/auth/internal/model"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// GetByUserName provides a mock function with given fields: ctx, username
func (_m *UserRepository) GetByUserName(ctx context.Context, username string) (*model.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserName")
	}

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByUserName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserName'
type UserRepository_GetByUserName_Call struct {
	*mock.Call
}

// GetByUserName is a helper method to define mock.On call
//   - ctx context.Context
//   - username string
func (_e *UserRepository_Expecter) GetByUserName(ctx interface{}, username interface{}) *UserRepository_GetByUserName_Call {
	return &UserRepository_GetByUserName_Call{Call: _e.mock.On("GetByUserName", ctx, username)}
}

func (_c *UserRepository_GetByUserName_Call) Run(run func(ctx context.Context, username string)) *UserRepository_GetByUserName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetByUserName_Call) Return(_a0 *model.User, _a1 error) *UserRepository_GetByUserName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetByUserName_Call) RunAndReturn(run func(context.Context, string) (*model.User, error)) *UserRepository_GetByUserName_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function with given fields: ctx, dbTx, req
func (_m *UserRepository) Insert(ctx context.Context, dbTx *sqlx.Tx, req *model.User) (uuid.UUID, error) {
	ret := _m.Called(ctx, dbTx, req)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *model.User) (uuid.UUID, error)); ok {
		return rf(ctx, dbTx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx, *model.User) uuid.UUID); ok {
		r0 = rf(ctx, dbTx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sqlx.Tx, *model.User) error); ok {
		r1 = rf(ctx, dbTx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserRepository_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - ctx context.Context
//   - dbTx *sqlx.Tx
//   - req *model.User
func (_e *UserRepository_Expecter) Insert(ctx interface{}, dbTx interface{}, req interface{}) *UserRepository_Insert_Call {
	return &UserRepository_Insert_Call{Call: _e.mock.On("Insert", ctx, dbTx, req)}
}

func (_c *UserRepository_Insert_Call) Run(run func(ctx context.Context, dbTx *sqlx.Tx, req *model.User)) *UserRepository_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.Tx), args[2].(*model.User))
	})
	return _c
}

func (_c *UserRepository_Insert_Call) Return(_a0 uuid.UUID, _a1 error) *UserRepository_Insert_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_Insert_Call) RunAndReturn(run func(context.Context, *sqlx.Tx, *model.User) (uuid.UUID, error)) *UserRepository_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
