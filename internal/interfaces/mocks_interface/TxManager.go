// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks_interface

import (
	context "context"

	sqlx "github.com/jmoiron/sqlx"
	mock "github.com/stretchr/testify/mock"
)

// TxManager is an autogenerated mock type for the TxManager type
type TxManager struct {
	mock.Mock
}

type TxManager_Expecter struct {
	mock *mock.Mock
}

func (_m *TxManager) EXPECT() *TxManager_Expecter {
	return &TxManager_Expecter{mock: &_m.Mock}
}

// Begin provides a mock function with given fields: ctx
func (_m *TxManager) Begin(ctx context.Context) (*sqlx.Tx, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Begin")
	}

	var r0 *sqlx.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sqlx.Tx, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TxManager_Begin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Begin'
type TxManager_Begin_Call struct {
	*mock.Call
}

// Begin is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TxManager_Expecter) Begin(ctx interface{}) *TxManager_Begin_Call {
	return &TxManager_Begin_Call{Call: _e.mock.On("Begin", ctx)}
}

func (_c *TxManager_Begin_Call) Run(run func(ctx context.Context)) *TxManager_Begin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TxManager_Begin_Call) Return(_a0 *sqlx.Tx, _a1 error) *TxManager_Begin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TxManager_Begin_Call) RunAndReturn(run func(context.Context) (*sqlx.Tx, error)) *TxManager_Begin_Call {
	_c.Call.Return(run)
	return _c
}

// Commit provides a mock function with given fields: ctx, dbtx
func (_m *TxManager) Commit(ctx context.Context, dbtx *sqlx.Tx) error {
	ret := _m.Called(ctx, dbtx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx) error); ok {
		r0 = rf(ctx, dbtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Commit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Commit'
type TxManager_Commit_Call struct {
	*mock.Call
}

// Commit is a helper method to define mock.On call
//   - ctx context.Context
//   - dbtx *sqlx.Tx
func (_e *TxManager_Expecter) Commit(ctx interface{}, dbtx interface{}) *TxManager_Commit_Call {
	return &TxManager_Commit_Call{Call: _e.mock.On("Commit", ctx, dbtx)}
}

func (_c *TxManager_Commit_Call) Run(run func(ctx context.Context, dbtx *sqlx.Tx)) *TxManager_Commit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *TxManager_Commit_Call) Return(_a0 error) *TxManager_Commit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Commit_Call) RunAndReturn(run func(context.Context, *sqlx.Tx) error) *TxManager_Commit_Call {
	_c.Call.Return(run)
	return _c
}

// Rollback provides a mock function with given fields: ctx, dbtx
func (_m *TxManager) Rollback(ctx context.Context, dbtx *sqlx.Tx) error {
	ret := _m.Called(ctx, dbtx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *sqlx.Tx) error); ok {
		r0 = rf(ctx, dbtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TxManager_Rollback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Rollback'
type TxManager_Rollback_Call struct {
	*mock.Call
}

// Rollback is a helper method to define mock.On call
//   - ctx context.Context
//   - dbtx *sqlx.Tx
func (_e *TxManager_Expecter) Rollback(ctx interface{}, dbtx interface{}) *TxManager_Rollback_Call {
	return &TxManager_Rollback_Call{Call: _e.mock.On("Rollback", ctx, dbtx)}
}

func (_c *TxManager_Rollback_Call) Run(run func(ctx context.Context, dbtx *sqlx.Tx)) *TxManager_Rollback_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sqlx.Tx))
	})
	return _c
}

func (_c *TxManager_Rollback_Call) Return(_a0 error) *TxManager_Rollback_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TxManager_Rollback_Call) RunAndReturn(run func(context.Context, *sqlx.Tx) error) *TxManager_Rollback_Call {
	_c.Call.Return(run)
	return _c
}

// NewTxManager creates a new instance of TxManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTxManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *TxManager {
	mock := &TxManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
